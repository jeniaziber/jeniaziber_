Поток работы с СОМ-портом
 #pragma package(smart_init)
HANDLE ComFile;  //СОМ-порт
OVERLAPPED Overlapped_W;
OVERLAPPED Overlapped_R;
unsigned char state;
unsigned char stop;
unsigned char* buffer;
unsigned char buffer_read[8]; //Переменная чтения данных
unsigned char buffer_start[8];//{0x01, 0x06, 0x40, 0x11, 0x30, 0x14, 0x01, 0x75};
unsigned char buffer_ack[8]={0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66};     //Команды для МК
unsigned char buffer_fail[8]={0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75};
unsigned char buffer_stop[8]={0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB9};
unsigned char start_button=0;

unsigned short angle=0, I1=0, Q1=0; //Переменные для приема данных
signed short I=0, Q=0, phase=0;  //Переменные для записи данных

ofstream LOG_File;

unsigned char CRC8Table[256]={ //Таблица подсчета CRC
    0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15, // 00
    0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d, // 08
    0x70, 0x77, 0x7E, 0x79, 0x6C, 0x6B, 0x62, 0x65, // 10
    0x48, 0x4F, 0x46, 0x41, 0x54, 0x53, 0x5A, 0x5D, // 18
    0xE0, 0xE7, 0xEE, 0xE9, 0xFC, 0xFB, 0xF2, 0xF5, // 20
    0xD8, 0xDF, 0xD6, 0xD1, 0xC4, 0xC3, 0xCA, 0xCD, // 28
    0x90, 0x97, 0x9E, 0x99, 0x8C, 0x8B, 0x82, 0x85,  // 30
    0xA8, 0xAF, 0xA6, 0xA1, 0xB4, 0xB3, 0xBA, 0xBD,  // 38
    0xC7, 0xC0, 0xC9, 0xCE, 0xDB, 0xDC, 0xD5, 0xD2,  // 40
    0xFF, 0xF8, 0xF1, 0xF6, 0xE3, 0xE4, 0xED, 0xEA,  // 48
    0xB7, 0xB0, 0xB9, 0xBE, 0xAB, 0xAC, 0xA5, 0xA2,  // 50
    0x8F, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9D, 0x9A,  // 58
    0x27, 0x20, 0x29, 0x2E, 0x3B, 0x3C, 0x35, 0x32,  // 60
    0x1F, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0D, 0x0A,  // 68
    0x57, 0x50, 0x59, 0x5E, 0x4B, 0x4C, 0x45, 0x42,  // 70
    0x6F, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7D, 0x7A,  // 78
    0x89, 0x8E, 0x87, 0x80, 0x95, 0x92, 0x9B, 0x9C,  // 80
    0xB1, 0xB6, 0xBF, 0xB8, 0xAD, 0xAA, 0xA3, 0xA4,  // 88
    0xF9, 0xFE, 0xF7, 0xF0, 0xE5, 0xE2, 0xEB, 0xEC,  // 90
    0xC1, 0xC6, 0xCF, 0xC8, 0xDD, 0xDA, 0xD3, 0xD4,  // 98
    0x69, 0x6E, 0x67, 0x60, 0x75, 0x72, 0x7B, 0x7C,  // a0
    0x51, 0x56, 0x5F, 0x58, 0x4D, 0x4A, 0x43, 0x44,  // a8
    0x19, 0x1E, 0x17, 0x10, 0x05, 0x02, 0x0B, 0x0C,  // b0
    0x21, 0x26, 0x2F, 0x28, 0x3D, 0x3A, 0x33, 0x34,  // b8
    0x4E, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5C, 0x5B,  // c0
    0x76, 0x71, 0x78, 0x7F, 0x6A, 0x6D, 0x64, 0x63,  // c8
    0x3E, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2C, 0x2B,  // d0
    0x06, 0x01, 0x08, 0x0F, 0x1A, 0x1D, 0x14, 0x13, // d8
    0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB, // e0
    0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83, // e8
    0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, // f0
    0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3 // f8
  };


void TComPort::SetupComPort(void)
{
const RxBufferSize=1024;
const TxBufferSize=1024;
DCB Dcb;
_COMMTIMEOUTS CommTimeouts;
SetupComm(ComFile, RxBufferSize, TxBufferSize);
GetCommState(ComFile, &Dcb);
Dcb.DCBlength=sizeof(DCB);
Dcb.fParity=false;           //Установка параметров СОМ-порта
Dcb.BaudRate=StrToInt(Form1->ComboBox2->Text);
Dcb.Parity=NOPARITY;    // четный
Dcb.StopBits=ONESTOPBIT;
Dcb.ByteSize=8;
SetCommState(ComFile, &Dcb);
CommTimeouts.ReadIntervalTimeout=0;
CommTimeouts.ReadTotalTimeoutMultiplier=0;   //Тайм-ауты для СОМ-порта
CommTimeouts.ReadTotalTimeoutConstant=1000;
CommTimeouts.WriteTotalTimeoutMultiplier=0;
CommTimeouts.WriteTotalTimeoutConstant=1000;
SetCommTimeouts(ComFile, &CommTimeouts);
}

bool TComPort::OpenComPort(void)  //Процедура открытия порта
{
unsigned char comport[10];
StrPCopy(comport, Form1->ComboBox1->Text);
ComFile=CreateFile(comport, GENERIC_READ|GENERIC_WRITE, 0, NULL, OPEN_EXISTING, FILE_FLAG_OVERLAPPED, 0);
        if (ComFile==INVALID_HANDLE_VALUE)
        {
        return false;
        }
        else
        {
        PurgeComm(ComFile, PURGE_TXCLEAR|PURGE_RXCLEAR);
        SetCommMask(ComFile, EV_RXCHAR);
        return true;
        }
}

void TComPort::CloseComPort(void) //Процедура закрытия порта
{
CloseHandle(ComFile);
}
void TComPort::PortScan(void)  //Сканирование системы на предмет
{                              //наличия свободных портов
TRegistry* reg=new TRegistry(KEY_READ);
TStringList* comlist=new TStringList();
reg->RootKey= HKEY_LOCAL_MACHINE;
reg->OpenKey("hardware\\devicemap\\serialcomm", false);
reg->GetValueNames(comlist);
for (int i=0; i<=comlist->Count-1; i++)
{
Form1->ComboBox1->Items->Add(reg->ReadString(comlist->Strings[i]));
}
reg->CloseKey();
delete comlist;
delete reg;
        }
void TComPort::ReadFromPort(void)  //Считывание с порта
{
DWORD RealBytesRead, WriteBytes, BytesRead, size_buffer;
DWORD Maska;
COMSTAT Comstat;
DWORD Error;

Overlapped_R.Offset=0;
Overlapped_R.OffsetHigh=0;
Overlapped_R.hEvent=CreateEvent(NULL,false,false,NULL); //автомат. сброс; событие в сброшенном состоянии

Overlapped_W.Offset=0;
Overlapped_W.OffsetHigh=0;
Overlapped_W.hEvent=CreateEvent(NULL,false,false,NULL); //автомат. сброс; событие в сброшенном состоянии
state=0;
stop=0;
        for (char i=0; i<8; i++)
        {
        buffer_read[i++]=0;
        }
PurgeComm(ComFile, PURGE_TXCLEAR|PURGE_RXCLEAR);
        while (1)
        {
                switch (state)
                {
                case 0:
                        WriteFile(ComFile, buffer, 8, &WriteBytes, &Overlapped_W);
                        if (WaitForSingleObject(Overlapped_W.hEvent, 1000)==WAIT_OBJECT_0)
                        {
                        }
                WaitCommEvent(ComFile, &Maska, &Overlapped_R);
                        if (WaitForSingleObject(Overlapped_R.hEvent, 1000)==WAIT_OBJECT_0)
                        {
                        ClearCommError(ComFile, &Error, &Comstat);
                                if ((Maska&EV_RXCHAR)==EV_RXCHAR)
                                {
                                        if ((Error&CE_RXPARITY)==0)
                                        {
                                        ReadFile(ComFile, buffer_read, Comstat.cbInQue, &RealBytesRead, &Overlapped_R);
                                        }
                                Maska=0;
                                }
                                if (CRC->Check(buffer_read, RealBytesRead))
                                {
                                        switch (buffer_read[0])
                                        {
                                        case 0x20:
                                        buffer=buffer_ack;
                                                if (stop==1)
                                                {
                                                state=1;
                                                }
                                        break;
                                        case 0x10: // приняли данные измерений
                                        I1=((unsigned short)(buffer_read[1])<<8)&0xFF00; //I-канал
                                        I1|=(unsigned short)(buffer_read[2])&0x00FF;
                                        I=(signed short)I1;
                                        Q1=((unsigned short)(buffer_read[3])<<8)&0xFF00; //Q-канал
                                        Q1|=(unsigned short)(buffer_read[4])&0x00FF;
                                        Q=(signed short)Q1;
                                        angle=((unsigned short)(buffer_read[5])<<8)&0xFF00; //угол
                                        angle|=((unsigned short)(buffer_read[6]))&0x00FF;
                                        if (I>0)  phase=(signed short) atan(Q/I);
                                        LOG_File<<angle<<"  "<<2*pow(((I*I)+(Q*Q)), 0.5)<<"        "<<phase<<endl; //запись в файл
                                        Form1->Series1->AddXY((double)angle, 2*pow(((I*I)+(Q*Q)), 0.5), " ", clRed); //график в режиме реального времени
                                                if (angle>=StrToInt(Form1->Edit2->Text)) //условия остановки цикла
                                                {
                                                buffer=buffer_stop;
                                                LOG_File.close();
                                                stop=1;
                                                }
                                                else
                                                {
                                                buffer=buffer_ack;
                                                }
                                        break;
                                        case 0x30:   //Остановка
                                        break;
                                        }
                                }
                                else
                                {
                                buffer=buffer_fail;    //Ошибка принятия
                                }
                        }
                        else
                        {
                        }
                        for (char i=0; i<8; i++)
                        {
                        buffer_read[i++]=0;
                        }
                        RealBytesRead=0;
                break;
                case 1:
                                break;
                }
                }

}
unsigned char TCRC8::Calc(unsigned char byte, unsigned char CRC8)
{
unsigned char CRC8_New;
CRC8_New=CRC8Table[CRC8^byte];  //Подсчет CRC
return CRC8_New;
}
unsigned char TCRC8::Check(unsigned char* buf, unsigned char byte_count)
{
static unsigned char crc=0;     //Проверка CRC
        for (unsigned char i=0; i<(byte_count-1); i++)
        {
        crc=TCRC8::Calc(*buf, crc);
        buf++;
        }
        if (*buf==crc)
        {
        crc=0;
        return 1;
        }
        else
        {
        crc=0;
        return 0;
        }
}
Основной поток
//author Kovshirin NikNik
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
extern ofstream LOG_File; //файл для прямой записи результатов
extern unsigned char buffer_start[8];  //переменная для передачи комманд
extern unsigned char* buffer;
extern unsigned char state; //переменная состояния
extern unsigned char stop;  //переменная остановки
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
        : TForm(Owner)
{
}
//---------------------------------------------------------------------------

void __fastcall TForm1::FormActivate(TObject *Sender)
{
ComPort->PortScan();
Event_Start=CreateEvent(NULL,false,false,NULL);
}
//---------------------------------------------------------------------------
void __fastcall TForm1::BitBtn1Click(TObject *Sender)
{                               //Процедура открытия СОМ-порта
        if (ComPort->OpenComPort())
        {
        ComPort->SetupComPort();
        BitBtn2->Enabled=true;
        BitBtn1->Enabled=false;
        }
        else
        {
        MessageDlg("Ошибка открытия порта "+Form1->ComboBox1->Text, mtError, TMsgDlgButtons() << mbOK, 0);
        }
}
//---------------------------------------------------------------------------
void __fastcall TForm1::BitBtn2Click(TObject *Sender)
{                         //Закрытие СОМ-порта
Sleep(100);
ComPort->CloseComPort();
BitBtn1->Enabled=true;
BitBtn2->Enabled=false;
}
//---------------------------------------------------------------------------

//--------------------------------------------------------------------------
void RunThread(void)
{                     //Запуск потока
DWORD  ThreadID;
hThread=CreateThread(NULL, 0, ReadThread, NULL, 0, NULL);
SetThreadPriority(hThread, tpNormal);
        if (hThread==0)
        {
        MessageDlg("Ошибка при запуске потока чтения", mtError, TMsgDlgButtons() << mbOK, 0);
        }
}
//------------------------------------------------------------------------------

//---------------------------------------------------------------------------
void CloseThread(void)
{                      //Остановка потока
        if(TerminateThread(hThread,0)==0)
        {
        MessageDlg("Ошибка при закрытии потока чтения", mtError, TMsgDlgButtons() << mbOK, 0);
        }
LOG_File.close();
}
//-------------------------------------------------------------------------------
void __fastcall TForm1::BitBtn3Click(TObject *Sender)  //СТАРТ
{                //Запуск измерений
unsigned char crc=0;  //Переменная контрольной суммы
state=0;
stop=0;
buffer_start[0]=0x01;
buffer_start[1]=(unsigned char)((StrToInt(Edit1->Text)>>8)&0xFF); //Начальный угол
buffer_start[2]=(unsigned char)(StrToInt(Edit1->Text)&0xFF);
buffer_start[3]=(unsigned char)(((StrToInt(Edit2->Text))>>8)&0xFF); //Конечный угол
buffer_start[4]=(unsigned char)((StrToInt(Edit2->Text))&0xFF);
buffer_start[5]=(unsigned char)((StrToInt(Edit3->Text))&0xFF); //Шаг поворота
buffer_start[6]=(unsigned char)(StrToInt(Edit4->Text)&0xFF);   //Коэффициент усиления
        for (char k=0; k<7; k++)
        {
        crc=CRC->Calc(buffer_start[k], crc);  //Подсчет контрольной суммы
        }
buffer_start[7]=crc;
buffer=buffer_start;
BitBtn3->Enabled=false;
BitBtn4->Enabled=true;
LOG_File.clear();
LOG_File.open("LOG.txt", ios::trunc);
Sleep(200);
Series1->Clear();
RunThread();
SetEvent(Event_Start);
}
//---------------------------------------------------------------------------

//--------------------------------------------------------------------------
DWORD WINAPI ReadThread(LPVOID)
{
ComPort->ReadFromPort();  //Считывание с СОМ-порта
}
//---------------------------------------------------------------------------
void __fastcall TForm1::BitBtn4Click(TObject *Sender)  //СТОП
{
TModalResult res;
LOG_File.close();
CloseThread();
BitBtn4->Enabled=false;
BitBtn3->Enabled=true;
Memo1->Lines->LoadFromFile("LOG.txt");   //Предложение сохранить данные
res = MessageDlg("Сохранить данные? ",mtConfirmation, TMsgDlgButtons() << mbYes << mbNo,0);
if (SaveDialog1->Execute())
Memo1->Lines->SaveToFile(SaveDialog1->FileName + ".txt");
if (res == mrYes)SaveDialog1->Execute();
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button4Click(TObject *Sender)   //Открыть файл
{
OpenDialog1->Execute();
Memo1->Lines->Clear();
Memo1->Lines->LoadFromFile(OpenDialog1->FileName); //Открытие файла
int i,a;                                           // с уже готовыми
float u;                                           //измерениями
for (i=0; i<Memo1->Lines->Count; i++){
a=StrToInt(Memo1->Lines->Strings[i].SubString(0,4));
u=StrToFloat(Memo1->Lines->Strings[i].SubString(7,7));
Form1->Series1->AddXY((double)a, u, " ", clRed);  }   //Построение графика
}
//---------------------------------------------------------------------------
void __fastcall TForm1::FormCreate(TObject *Sender)
{
DecimalSeparator='.';
Memo1->Lines->Clear();
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button1Click(TObject *Sender)   //Нормировка
{
Form3->Show();
Form3->Series1->Clear();
int i,j;  //Cчетчики циклов
float uu[37], umax; //Массивы данных
int ang[37];
for (j=0; j<Memo1->Lines->Count; j++)   //Считывание с файлов
ang[j]=StrToInt(Memo1->Lines->Strings[j].SubString(0,4));
for (i=0; i<Memo1->Lines->Count; i++)
uu[i]=StrToFloat(Memo1->Lines->Strings[i].SubString(7,7));
uu[0] = umax;
Form3->Memo3->Lines->Clear();
for(i=0; i<37; i++) if (uu[i]>umax) umax=uu[i];
for (i=0; i<37; i++)  {                 //Подсчет нормировочных данных
uu[i]=(uu[i]/umax);
Form3->Series1->AddXY((float)ang[i],uu[i]," ",clRed); //График
AnsiString str;
str = (IntToStr(ang[i])+"  "+FloatToStr(uu[i]));
Form3->Memo3->Lines->Add(str);}

}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button3Click(TObject *Sender)  //Усреднение
{
Form4->Show();
Form4->Series1->Clear();          //Задание кол-ва точек усреднения
AnsiString usr1 = InputBox("Усреднение ","Количество точек, по которому будет производится усреднение","3");
int s = StrToInt(usr1);
int i,j;
float uu[37]; //Массивы данных
int ang[37];
for (j=0; j<Memo1->Lines->Count; j++)
ang[j]=StrToInt(Memo1->Lines->Strings[j].SubString(0,4)); //Считыване с файлов
for (i=0; i<Memo1->Lines->Count; i++)
uu[i]=StrToFloat(Memo1->Lines->Strings[i].SubString(7,7));
uu[0-2]=uu[0];
uu[0-1]=uu[0];
for (i=s; i<37; i=i+s){
uu[i]=(uu[i-s]+uu[i]+uu[i+s])/s;  //Подсчет усредненных данных
Form4->Series1->AddXY((float)ang[i],uu[i]," ",clRed); //График
AnsiString str;
str = (IntToStr(ang[i])+"  "+FloatToStr(uu[i]));
Form4->Memo4->Lines->Add(str);
}}
 //---------------------------------------------------------------------------
void __fastcall TForm1::Button2Click(TObject *Sender) //Калибровка
{
Form5->Show();
Form5->Series1->Clear();
int i,j;
float uu[37], db[37]; //Массивы данных
int ang[37];
for (j=0; j<Memo1->Lines->Count; j++)  //Считывание с файла
ang[j]=StrToInt(Memo1->Lines->Strings[j].SubString(0,4));
for (i=0; i<Memo1->Lines->Count; i++)
uu[i]=StrToFloat(Memo1->Lines->Strings[i].SubString(7,7));
for(i=0; i<37; i++) {            //Подсчет калибровочных данных
db[i]=(-1)*((13.68064*exp((-uu[i]/0.36176))+9.91407*exp((-uu[i]/6.14676))+12.73088*exp((-uu[i]/104.72097))-0.53519));
Form5->Series1->AddXY((float)ang[i],db[i]," ",clRed); //График
AnsiString str;
str = (IntToStr(ang[i])+"  "+FloatToStr(uu[i]));
Form5->Memo6->Lines->Add(str);
}}
